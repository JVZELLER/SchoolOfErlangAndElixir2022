# Introduction to Elixir

## Simple data types

## Numbers

There are 2 types of numbers in Elixir integers and floats. 
They work like in most other programming languages.
Note: integers automaticly switch to bigInts so there no need to remeber about it.

```elixir
# Integers and Floats

# 1
# +2
# -3
# 1_000_000_000

# 12.345
# -2.71
# 3.14e-10
# 123_456.789_1011e23
```

```elixir
# Maths operations

# 3 + 3 * 3
# 3 + (3 * 3)

# Integers are automatically converted to big integers
# 123456789987654321 + 123456789987654321123456789987654321
```

There are 2 types of comaprisons on Elixir: normal and strict one.
The strict one checks not only for value but also for type.

```elixir
# Comparisions

# 1 == 1.0
# 1 === 1.0

# 1.0 != 1
# 1.0 !== 1
```

## Atoms

Atoms are constant literals where its value is its own name.

```elixir
# Atoms examples

# :some_atom
# :AnotherAtom
# :"Wh@tever insinde quotes !{}"
# :"12" # 12 as an atom
```

## Booleans

Booleans are in fact just atoms `:true` and `:false`.
In Elixir boolean logic there is a concept of _truthly values_.
There is no separare value for _nil_ therefore atom `:nil` is used.
You can type `nil` for simplicity sake.
Boolean operators `&&` and `||` consider `nil` to be the same as `false` and anything else is consifered to be `true`.
Operator `!` negates the truthly values.

```elixir
# true
# true == :true
# true === :true
# !true
# ! :true

# Truthly values
# nil
# ! nil
# ! :whatever
# nil || :something
# true && :something
```

## Chars

Chars are stored as their unicode values (integers).

```elixir
# ?a
# ?\n
# ?a == 97
```

## String

String is stored as a binary and not as a list of chars (like in eg Haskell) for performence sake.
It uses UTF-8 encoding.
You can interpolate it uing `#{...}`.

```elixir
name = "Aleksander"

"Hello #{name}"
```

## Complex data types

## Tuples

Tuples are constant size gropings of elements.
They have faster element acces time then lists.

```elixir
# {}
# 
# {1, 2, 3}
# {1, {2, :nested}}
```

## Lists

Elixir uses square brackets to specify a (linked) list of values.
Lists are heterogeneous, elements of the list may be of different types.
Lists can be concatented using `++` infix operator.

```elixir
# []
# [1]
# [:asdf, 1, "apple", {:tupple, 2}]

# [1, 2, 3]
# [1 | [2, 3]]
# [1 | [2 | [3]]]
# [1 | [2 | [3 | []]]]

# 2 in [1, 2, 4]
# 3 in [1, 2, 4]

# [?A, ?l, ?e, ?k]

# 'Alek' == "Alek"

# Getting type:
# IEx.Helpers.i('Alek')
# IEx.Helpers.i("Alek")

# [1, 2] ++ [3, 4]
```

## Maps

A map is created using the `%{}` syntax.
Maps can be pattern matched.
Read more: https://dashbit.co/blog/writing-assertive-code-with-elixir

```elixir
# %{}
# Map.new()

# computer = %{
#   :type => :pc,
#   "graphics card" => ["GTX", 760],
#   {:processor, "intel"} => [{8, :cores}, {:type, :x86}]
# }

# computer[:type]
# computer[{:processor, "intel"}]
# computer[:not_exixsting_key]

# computer.type
# computer.not_exixsting_key
# computer.

# laptop = %{computer | :type => :laptop}
# laptop = %{computer | :sound => {:serround, 5.1}}
# laptop = Map.put(computer, :sound, {:serround, 5.1})

# tablet = %{:type => %{divice_type: :tablet, os: :android}}

# tablet.type.os
# tablet[:type].os
# tablet.type[:os]
# tablet[:type][:os]
```

## Structs

Structs are extensions built on top of maps with default values.

```elixir
defmodule Device do
  defstruct devide_type: nil,
            os: :linux,
            processor: nil
end
```

```elixir
# pc = %Device{
#   devide_type: :pc
# }

# pc
# pc.os

# tablet = %Device{
#   devide_type: :tablet,
#   processor: {:intel, :x86},
#   os: :android
# }

# tablet
```

If you want to know more see: https://elixir-lang.org/getting-started/introduction.html and the following chapters.
