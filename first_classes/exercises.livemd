# Exercises

## FizzBuzz

Write a function that returns the numbers from 1 to `n`.
But for multiples of:

* three replaces a number with an atom `:fizz` instead of the number
* five replaces a number with an atom `:buzz`
* both three and five replaces a number with an atom `:fizzbuzz`.

Tip: see [How to use `div/2` and/or `rem/2`?](https://elixir-lang.org/getting-started/basic-types.html#basic-arithmetic)

```elixir
defmodule FizzBuzz do
  def fizzbuzz(n) do
    []
  end
end
```

```elixir
[] = FizzBuzz.fizzbuzz(0)
[1] = FizzBuzz.fizzbuzz(1)
[1, 2] = FizzBuzz.fizzbuzz(2)
[1, 2, :fizz] = FizzBuzz.fizzbuzz(3)

[
  1,
  2,
  :fizz,
  4,
  :buzz,
  :fizz,
  7,
  8,
  :fizz,
  :buzz,
  11,
  :fizz,
  13,
  14,
  :fizzbuzz,
  16,
  17,
  :fizz,
  19,
  :buzz,
  :fizz,
  22,
  23,
  :fizz,
  :buzz,
  26,
  :fizz,
  28,
  29,
  :fizzbuzz,
  31
] = FizzBuzz.fizzbuzz(31)
```

## Quick sort

If list is empty (or 1 element) list it is sorted.
Pick the first element of a list `fisrt`.
Filer smaller elements from the the first element `first` of a remaining list to a list `smaller`.
Filer greater or equal elements from the the first element `first` of a remaining list filter to a list `bigger`.
Sort `smaller` to `sorted_smaller`.
Sort `bigger` to `sorted_bigger`.
Return `sorted_smaller ++ [first] ++ sorted_bigger`.
Tip: use [`Enum.filter/2`](https://elixirschool.com/en/lessons/basics/enum/#filter).

```elixir
defmodule QuickSort do
  def quicksort(lst) do
    lst
    |> Enum.sort()
  end
end
```

```elixir
[] = QuickSort.quicksort([])
[1] = QuickSort.quicksort([1])
[1, 2] = QuickSort.quicksort([1, 2])
[1, 2] = QuickSort.quicksort([2, 1])
```

```elixir
ExUnit.start(autorun: false)

defmodule QuickSort.Test do
  use ExUnit.Case, async: false

  test "Empty list is sorted" do
    assert [] == QuickSort.quicksort([])
  end

  test "single element list is sorted" do
    assert [1] == QuickSort.quicksort([1])
  end

  test "sorted 2 element list is sorted" do
    assert [1, 2] == QuickSort.quicksort([1, 2])
  end

  test "unsorted 2 element list gets sorted" do
    assert [1, 2] == QuickSort.quicksort([2, 1])
  end

  test "comperative implementation check" do
    len = :rand.uniform(100_000)

    lst =
      1..len
      |> Enum.to_list()
      |> Enum.map(fn _ -> :rand.uniform(100_000) - 50_000 end)

    expected = Enum.sort(lst)
    actuall = QuickSort.quicksort(lst)
    assert expected == actuall
  end
end

ExUnit.run()
```

## Wordle

Wordle is such a simple game that there are hardly any rules. But here you go:

* You have to guess the Wordle in six goes or less
* Every word you enter must be in the word list.
* A correct letter turns green.
* A correct letter in the wrong place turns yellow[*](https://nerdschalk.com/wordle-same-letter-twice-rules-explained-how-does-it-work/).
* An incorrect letter turns gray.
* Letters can be used more than once.
* Word consists of 5 letters.

Rules taken form [here](https://www.tomsguide.com/news/what-is-wordle).

Implement a function that takes two 5 letters words (the one that needs to be guessed and your guess) and returnes
a list of colors for each letter.

Tip:

```elixir
[?a, ?s, ?d, ?f] == :binary.bin_to_list("asdf")
```

```elixir
defmodule Wordle do
  def color_word(actuall, guess) do
    [:gray, :gray, :gray, :gray, :gray]
    # TODO finish implementation
  end
end
```

Implement remaining tescases

```elixir
ExUnit.start(autorun: false)

defmodule Wordle.Test do
  use ExUnit.Case, async: false

  test "none of the latters match" do
    expected = 1..5 |> Enum.to_list() |> Enum.map(fn _ -> :gray end)
    assert expected == Wordle.color_word("abcde", "fghij")
  end

  # test "all of the latters match" do
  # end

  # test "a letter is in different place" do
  # end

  # test "a letter is passed 2 times but exists once in a word both in different place" do
  # end

  # test "a letter is passed 3 times but exists once in a word both in different place" do
  # end

  # test "a letter is passed 2 times but exists once in a word and one is in the right place" do
  # end

  # test "a letter is passed 3 times but exists once in a word and one is in the right place" do
  # end

  # test "2 green, 1 yellow" do
  # end
end

ExUnit.run()
```
